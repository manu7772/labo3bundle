<?php

namespace laboBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Doctrine\ORM\QueryBuilder;
use \Exception;
use \DateTime;

/**
 * versionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class baseVersionRepository extends EntityRepository {

	const ELEMENT = 'element';

	protected $versionSlug = null;
	// valeurs possibles :
	// null = version par défaut (defaultVersion = true)
	// false = pas de test de version
	// string = slug de la version à recherche

	/**
	 * defaultVal
	 * Renvoie l'instance de la version par défaut (ou null)
	 * @return version / false si non trouvée
	 */
	public function defaultVal() {
		return $this->defaultVersion();
	}

	/**
	 * Renvoie l'instance de la version par défaut (ou null)
	 * @return version / false si non trouvée
	 */
	public function defaultVersion() {
		$qb = $this->getQbWithDefaultVersion();
		try {
			$result = $qb->getQuery()->getSingleResult();
		} catch (Exception $e) {
			// printf("Aucun résultat pour la version par défaut…\n");
			$result = false;
		}
		return $result;
	}

	protected function getElementsForSession() {
		return array();
	}

	/**
	 * Renvoie les données de version en array
	 * @param string $valeur - valeur recherchée
	 * @param string $champ - champ dans lequel la valeur est recherchée
	 * @param array $adds - éléments associés à ajouter (leftJoin) sous forme d'array (multiples niveaux possibles)
	 * @return array
	 */
	public function findVersionWithLinks($valeur = null, $champ = 'slug', $adds = null) {
		if($valeur !== null) {
			$qb = $this->createQueryBuilder(self::ELEMENT);
			$qb->where(self::ELEMENT.'.'.$champ.' = :val')
				->setParameter('val', $valeur);
			$errorMessage = "La version ".$valeur." (".$champ.") n'a pu être trouvée.";
		} else {
			$qb = $this->getQbWithDefaultVersion();
			$errorMessage = "Il n'existe pas de version par défaut.";
		}
		// if($adds === null) $adds = $this->getElementsForSession();
		$qb = $this->addJoins($qb, $adds);
		$version = $qb->getQuery()->getOneOrNullResult();
		// echo('<p>recherche version : '.$version->getNom().'</p>');
		return $version;
		// if(count($versions) > 0) return reset($versions);
		throw new Exception($errorMessage, 1);
	}

	/**
	 * jointures leftJoin d'après un array
	 * @param QueryBuilder $qb
	 * @param array $adds
	 * @param string $champ
	 * @return QueryBuilder
	 */
	protected function addJoins(QueryBuilder $qb, $adds, $joined = null) {
		if($joined === null || !is_string($joined)) $joined = self::ELEMENT;
		if(is_array($adds)) foreach($adds as $field => $childs) {
			$itemField = $joined.'.'.$field;
			if(!is_array($childs)) $childs = array();
			$qb->leftJoin($itemField, $joined.$field)
				->addSelect($joined.$field);
			// echo('$qb->leftJoin('.$itemField.', '.$joined.$field.')<br>->addSelect('.$joined.$field.')'.'<br>');
			if(count($childs) > 0) $qb = $this->addJoins($qb, $childs, $joined.$field);
		}
		return $qb;
	}

	/**
	 * Définit la version à utiliser pour les requêtes
	 * @param string $versionSlug
	 * @return QueryBuilder
	 */
	public function setVersion($versionSlug = null) {
		$this->versionSlug = $versionSlug;
	}

	/**
	 * filtre la version à utiliser par défaut dans le qb
	 * @param QueryBuilder $qb
	 * @return QueryBuilder
	 */
	protected function getQbWithDefaultVersion(QueryBuilder $qb = null) {
		if($qb === null) $qb = $this->createQueryBuilder(self::ELEMENT);
		// if($this->versionSlug === false) return $qb;
		// if($this->versionSlug === null) {
			$qb->where(self::ELEMENT.'.defaultVersion = :val')
				->setParameter('val', 1);
		// }
		// if(is_string($this->versionSlug)) {
		// 	$qb->where(self::ELEMENT.'.slug = :version')
		// 		->setParameter('version', $this->versionSlug);
		// }
		return $qb;
	}

}